<%- include('partials/header'); -%>

    <div class="relative isolate px-6 pt-20 lg:px-8">
        <!-- <div class="absolute inset-x-0 -top-40 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80"
            aria-hidden="true">
            <div class="relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[#fcb8d4] to-[#dcdaf7] opacity-30 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]"
                style="clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)">
            </div>
        </div> -->

        <section class="mt-10 dark:bg-gray-900">
            <div class="flex flex-col items-center justify-center px-6 py-8 mx-auto md:min-h-screen lg:py-0">
                <div
                    class="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-xl xl:p-0 dark:bg-gray-800 dark:border-gray-700">
                    <div class="p-6 space-y-4 md:space-y-6 sm:p-8">
                        <a href="#"
                            class="flex text-center justify-center mb-6 text-2xl font-semibold text-gray-900 dark:text-white">
                            <img class="w-8 h-8 mr-2"
                                src="https://flowbite.s3.amazonaws.com/blocks/marketing-ui/logo.svg" alt="logo">
                            Route Finder
                        </a>
                        <!-- <form class="space-y-4 md:space-y-6" action="/find-route" method="POST"> -->
                        <!-- Source Airport -->
                        <div>
                            <label for="source"
                                class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Source
                                Airport</label>
                            <select name="source" id="source"
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                required>
                                <option value="" disabled selected>Select your airport</option>
                                <option value="Delhi">Delhi</option>
                                <option value="Mumbai">Mumbai</option>
                                <option value="Bangalore">Bangalore</option>
                                <option value="Hyderabad">Hyderabad</option>
                                <option value="Chennai">Chennai</option>
                                <option value="Kolkata">Kolkata</option>
                                <option value="Ahmedabad">Ahmedabad</option>
                                <option value="Pune">Pune</option>
                                <option value="Jaipur">Jaipur</option>
                                <option value="Lucknow">Lucknow</option>
                                <option value="Cochin">Cochin</option>
                                <option value="Guwahati">Guwahati</option>
                                <option value="Bhubaneswar">Bhubaneswar</option>
                                <option value="Chandigarh">Chandigarh</option>
                                <option value="Patna">Patna</option>
                                <option value="Indore">Indore</option>
                                <option value="Nagpur">Nagpur</option>
                                <option value="Goa">Goa</option>
                                <option value="Srinagar">Srinagar</option>
                                <option value="Varanasi">Varanasi</option>
                            </select>
                        </div>

                        <!-- Destination Airport -->
                        <div>
                            <label for="destination"
                                class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Destination
                                Airport</label>
                            <select name="destination" id="destination"
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                required>
                                <option value="" disabled selected>Select your airport</option>
                                <option value="Delhi">Delhi</option>
                                <option value="Mumbai">Mumbai</option>
                                <option value="Bangalore">Bangalore</option>
                                <option value="Hyderabad">Hyderabad</option>
                                <option value="Chennai">Chennai</option>
                                <option value="Kolkata">Kolkata</option>
                                <option value="Ahmedabad">Ahmedabad</option>
                                <option value="Pune">Pune</option>
                                <option value="Jaipur">Jaipur</option>
                                <option value="Lucknow">Lucknow</option>
                                <option value="Cochin">Cochin</option>
                                <option value="Guwahati">Guwahati</option>
                                <option value="Bhubaneswar">Bhubaneswar</option>
                                <option value="Chandigarh">Chandigarh</option>
                                <option value="Patna">Patna</option>
                                <option value="Indore">Indore</option>
                                <option value="Nagpur">Nagpur</option>
                                <option value="Goa">Goa</option>
                                <option value="Srinagar">Srinagar</option>
                                <option value="Varanasi">Varanasi</option>
                            </select>
                        </div>

                        <!-- Priority Selection -->
                        <!-- <div>
                                <label for="priority"
                                    class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Priority</label>
                                <select name="priority" id="priority"
                                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                    required>
                                    <option value="" disabled selected>Select priority</option>
                                    <option value="less-time">Time</option>
                                    <option value="low-cost">Cost</option>
                                </select>
                            </div> -->

                        <!-- Submit Button -->
                        <button onclick="findShortestPath()"
                            class="w-full text-white bg-sky-400 hover:bg-sky-500 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-sky-700 dark:focus:ring-primary-800">Find
                            Shortest Path</button>
                        <!-- <button type="submit"
                                class="w-full text-white bg-sky-400 hover:bg-sky-500 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-sky-700 dark:focus:ring-primary-800">Search
                                Flights</button> -->
                        <!-- </form> -->
                    </div>

                    <div class="result p-5" id="result"></div>

                    <!-- Graph Visualization -->
                    <div id="network" class="p-5" style="width: 100%;"></div>
                </div>
            </div>
        </section>
        <!-- <div class="absolute inset-x-0 top-[calc(100%-13rem)] -z-10 transform-gpu overflow-hidden blur-3xl sm:top-[calc(100%-30rem)]"
            aria-hidden="true">
            <div class="relative left-[calc(50%+3rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 bg-gradient-to-tr from-[#fcb8d4] to-[#dcdaf7] opacity-30 sm:left-[calc(50%+36rem)] sm:w-[72.1875rem]"
                style="clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)">
            </div>
        </div> -->

    </div>


    <script>
        // Select DOM elements
        const mobileMenuButton = document.querySelector('button[type="button"]');
        const mobileMenu = document.querySelector('.lg\\:hidden[role="dialog"]');
        const closeMenuButton = mobileMenu.querySelector('button[type="button"]');

        // Ensure the mobile menu is hidden on page load
        document.addEventListener('DOMContentLoaded', () => {
            mobileMenu.classList.add('hidden');
        });

        // Toggle the visibility of the mobile menu
        function toggleMenu() {
            mobileMenu.classList.toggle('hidden');
        }

        // Add event listeners for open and close actions
        mobileMenuButton.addEventListener('click', toggleMenu);
        closeMenuButton.addEventListener('click', toggleMenu);


        const indiaAirportGraph = {
            'Delhi': {
                'Mumbai': {
                    time: 135,
                    cost: 5000
                },
                'Bangalore': {
                    time: 155,
                    cost: 5500
                },
                'Lucknow': {
                    time: 55,
                    cost: 2000
                },
                'Chandigarh': {
                    time: 45,
                    cost: 1500
                }
            },
            'Mumbai': {
                'Delhi': {
                    time: 135,
                    cost: 5000
                },
                'Hyderabad': {
                    time: 75,
                    cost: 3000
                },
                'Chennai': {
                    time: 95,
                    cost: 3500
                },
                'Ahmedabad': {
                    time: 50,
                    cost: 2500
                }
            },
            'Bangalore': {
                'Delhi': {
                    time: 155,
                    cost: 5500
                },
                'Hyderabad': {
                    time: 65,
                    cost: 2500
                },
                'Cochin': {
                    time: 50,
                    cost: 2000
                },
                'Pune': {
                    time: 80,
                    cost: 3000
                }
            },
            'Hyderabad': {
                'Mumbai': {
                    time: 75,
                    cost: 3000
                },
                'Bangalore': {
                    time: 65,
                    cost: 2500
                },
                'Chennai': {
                    time: 60,
                    cost: 2200
                },
                'Nagpur': {
                    time: 60,
                    cost: 2000
                }
            },
            'Chennai': {
                'Mumbai': {
                    time: 95,
                    cost: 3500
                },
                'Hyderabad': {
                    time: 60,
                    cost: 2200
                },
                'Kolkata': {
                    time: 110,
                    cost: 4000
                },
                'Bhubaneswar': {
                    time: 75,
                    cost: 3200
                }
            },
            'Kolkata': {
                'Chennai': {
                    time: 110,
                    cost: 4000
                },
                'Bhubaneswar': {
                    time: 45,
                    cost: 1800
                },
                'Guwahati': {
                    time: 70,
                    cost: 3000
                },
                'Patna': {
                    time: 50,
                    cost: 2000
                }
            },
            'Ahmedabad': {
                'Mumbai': {
                    time: 50,
                    cost: 2500
                },
                'Pune': {
                    time: 60,
                    cost: 2700
                },
                'Indore': {
                    time: 70,
                    cost: 2800
                },
                'Goa': {
                    time: 80,
                    cost: 3500
                }
            },
            'Pune': {
                'Bangalore': {
                    time: 80,
                    cost: 3000
                },
                'Ahmedabad': {
                    time: 60,
                    cost: 2700
                },
                'Jaipur': {
                    time: 95,
                    cost: 3700
                },
                'Goa': {
                    time: 75,
                    cost: 3200
                }
            },
            'Jaipur': {
                'Pune': {
                    time: 95,
                    cost: 3700
                },
                'Lucknow': {
                    time: 75,
                    cost: 3000
                },
                'Chandigarh': {
                    time: 60,
                    cost: 2700
                },
                'Delhi': {
                    time: 55,
                    cost: 2000
                }
            },
            'Lucknow': {
                'Delhi': {
                    time: 55,
                    cost: 2000
                },
                'Jaipur': {
                    time: 75,
                    cost: 3000
                },
                'Varanasi': {
                    time: 45,
                    cost: 1500
                },
                'Patna': {
                    time: 55,
                    cost: 2500
                }
            },
            'Cochin': {
                'Bangalore': {
                    time: 50,
                    cost: 2000
                },
                'Goa': {
                    time: 60,
                    cost: 2500
                },
                'Chennai': {
                    time: 80,
                    cost: 3500
                },
                'Kolkata': {
                    time: 120,
                    cost: 4500
                }
            },
            'Guwahati': {
                'Kolkata': {
                    time: 70,
                    cost: 3000
                },
                'Bhubaneswar': {
                    time: 85,
                    cost: 3500
                },
                'Patna': {
                    time: 75,
                    cost: 3000
                },
                'Srinagar': {
                    time: 115,
                    cost: 5000
                }
            },
            'Bhubaneswar': {
                'Kolkata': {
                    time: 45,
                    cost: 1800
                },
                'Chennai': {
                    time: 75,
                    cost: 3200
                },
                'Guwahati': {
                    time: 85,
                    cost: 3500
                },
                'Hyderabad': {
                    time: 105,
                    cost: 4500
                }
            },
            'Chandigarh': {
                'Delhi': {
                    time: 45,
                    cost: 1500
                },
                'Jaipur': {
                    time: 60,
                    cost: 2700
                },
                'Indore': {
                    time: 75,
                    cost: 3200
                },
                'Srinagar': {
                    time: 90,
                    cost: 4000
                }
            },
            'Patna': {
                'Kolkata': {
                    time: 50,
                    cost: 2000
                },
                'Lucknow': {
                    time: 55,
                    cost: 2500
                },
                'Guwahati': {
                    time: 75,
                    cost: 3000
                },
                'Varanasi': {
                    time: 60,
                    cost: 2800
                }
            },
            'Indore': {
                'Ahmedabad': {
                    time: 70,
                    cost: 2800
                },
                'Chandigarh': {
                    time: 75,
                    cost: 3200
                },
                'Nagpur': {
                    time: 90,
                    cost: 4000
                },
                'Goa': {
                    time: 90,
                    cost: 3700
                }
            },
            'Nagpur': {
                'Hyderabad': {
                    time: 60,
                    cost: 2000
                },
                'Indore': {
                    time: 90,
                    cost: 4000
                },
                'Mumbai': {
                    time: 75,
                    cost: 3500
                },
                'Goa': {
                    time: 85,
                    cost: 3200
                }
            },
            'Goa': {
                'Pune': {
                    time: 75,
                    cost: 3200
                },
                'Indore': {
                    time: 90,
                    cost: 3700
                },
                'Cochin': {
                    time: 60,
                    cost: 2500
                },
                'Ahmedabad': {
                    time: 80,
                    cost: 3500
                }
            },
            'Srinagar': {
                'Chandigarh': {
                    time: 90,
                    cost: 4000
                },
                'Guwahati': {
                    time: 115,
                    cost: 5000
                },
                'Delhi': {
                    time: 60,
                    cost: 2800
                },
                'Patna': {
                    time: 100,
                    cost: 4500
                }
            },
            'Varanasi': {
                'Lucknow': {
                    time: 45,
                    cost: 1500
                },
                'Patna': {
                    time: 60,
                    cost: 2800
                },
                'Delhi': {
                    time: 75,
                    cost: 3500
                },
                'Hyderabad': {
                    time: 90,
                    cost: 4000
                }
            }
        };


        // Updated Dijkstra's algorithm to find the shortest path considering intermediate nodes
        function dijkstra(source, destination) {
            const costs = {};
            const times = {};
            const previous = {};
            const queue = new Set();

            // Initialize all airports with infinity costs and times
            for (const airport in indiaAirportGraph) {
                costs[airport] = Infinity;
                times[airport] = Infinity;
                previous[airport] = null;
                queue.add(airport);
            }

            // Start with the source airport
            costs[source] = 0;
            times[source] = 0;

            while (queue.size) {
                // Find the airport with the lowest cost
                const current = [...queue].reduce((minNode, node) => {
                    return costs[node] < costs[minNode] ? node : minNode;
                }, [...queue][0]);

                // If we reached the destination, construct the path
                if (current === destination) {
                    const path = [];
                    let temp = destination;
                    while (temp) {
                        path.unshift(temp);
                        temp = previous[temp];
                    }
                    return {
                        path,
                        time: times[destination],
                        cost: costs[destination],
                    };
                }

                // Remove the current airport from the queue
                queue.delete(current);

                // Explore all neighbors (connected airports) of the current airport
                for (const neighbor in indiaAirportGraph[current]) {
                    const travelInfo = indiaAirportGraph[current][neighbor];
                    const newCost = costs[current] + travelInfo.cost;
                    const newTime = times[current] + travelInfo.time;

                    // If the new cost is lower, update the neighbor's cost and time
                    if (newCost < costs[neighbor]) {
                        costs[neighbor] = newCost;
                        times[neighbor] = newTime;
                        previous[neighbor] = current;
                    }
                }
            }

            // If no path was found, return null (but this case should never occur in a fully connected graph)
            return null;
        }

        // Function to find the shortest path and display the result
        function findShortestPath() {
            const source = document.getElementById("source").value;
            const destination = document.getElementById("destination").value;

            const result = dijkstra(source, destination);

            const resultDiv = document.getElementById("result");
            if (result) {
                resultDiv.innerHTML = `
                        <p style="font-size: 16px; color: #333;">
                        <strong>*Note:</strong> Real data is not used in the project. Random data is collected and predicted the shortest path.
                        </p>
                        <p style="font-size: 16px; color: #4a90e2;">
                        <strong>Travel Time:</strong> <span style="color: #2ecc71;">${result.time}</span> minutes
                        </p>
                        <p style="font-size: 16px; color: #4a90e2;">
                        <strong>Cost:</strong> <span style="color: #e74c3c;">₹${result.cost}</span>
                        </p>`;

                drawGraph(result.path);
            } else {
                resultDiv.innerHTML = 'No path found.';
            }
        }

        // Function to visualize the route on the graph
        function drawGraph(path) {
            const nodes = new vis.DataSet();
            const edges = new vis.DataSet();
            const uniqueAirports = new Set(path);

            // Add nodes with airport names inside elliptical shapes
            uniqueAirports.forEach((airport) => {
                nodes.add({
                    id: airport,
                    label: airport,
                    shape: 'ellipse',  // Elliptical shape
                    widthConstraint: {
                        maximum: 120,  // Limit node width
                    },
                    heightConstraint: {
                        maximum: 60,  // Limit node height
                    },
                    font: {
                        size: 16,
                        face: 'Arial',
                        color: '#ffffff',  // White font for contrast
                        align: 'center',
                    },
                    color: {
                        background: '#2196F3',  // Blue background
                        border: '#1E88E5',  // Darker border
                    },
                });
            });

            // Add edges without hover effects
            for (let i = 0; i < path.length - 1; i++) {
                edges.add({
                    from: path[i],
                    to: path[i + 1],
                    arrows: { to: { enabled: true, scaleFactor: 1.2 } },  // Arrow for direction
                    color: {
                        color: '#A9A9A9',  // Gray color for edges
                    },
                    smooth: { type: 'dynamic' },  // Smooth curves
                });
            }

            const container = document.getElementById("network");

            // Adjust the container height dynamically
            const minHeight = 300;
            const calculatedHeight = Math.max(minHeight, uniqueAirports.size * 60);
            container.style.height = `${calculatedHeight}px`;

            const data = { nodes, edges };
            const options = {
                layout: {
                    improvedLayout: true,  // Automatically arrange nodes neatly
                },
                physics: {
                    enabled: true,  // Enable physics for smooth layout
                    solver: 'forceAtlas2Based',
                    stabilization: { iterations: 150 },
                },
                interaction: {
                    zoomView: true,  // Allow zooming in/out
                    hover: false,  // Disable hover effects
                },
            };

            const network = new vis.Network(container, data, options);
            network.fit();  // Ensure the graph fits the container
        }

    </script>

    </body>

    </html>